#include <WiFi.h>
#include <PubSubClient.h>
#include <DHTesp.h>
#include <ESP32Servo.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// WiFi credentials
const char* ssid = "Wokwi-GUEST"; // Replace with your WiFi SSID
const char* password = "";        // Replace with your WiFi password

// MQTT settings
const char* mqtt_server = "broker.hivemq.com";
WiFiClient espClient;
PubSubClient client(espClient);

// DHT Sensor settings
const int DHT_PIN = 18;
DHTesp dhtSensor;

// Servo settings
const int servoPin = 19;
Servo servo;
  // Servo "ON" position
const int servoOffPosition = 0;  // Servo "OFF" position
const int servoOnPosition = 90;
// Soil moisture sensor settings
const int soilMoisturePin = 34;  // Analog pin for soil moisture sensor

// LCD settings
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Globals for MQTT publishing
unsigned long lastMsg = 0;

// Callback to handle messages from the prediction topic
void callback(char* topic, byte* payload, unsigned int length) {
  String message;
  for (int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  Serial.print("Message received on topic ");
  Serial.print(topic);
  Serial.print(": ");
  Serial.println(message);

  // Act on the irrigation prediction
  if (String(topic) == "irrigation/decision") {
    int prediction = message.toInt();
    if (prediction == 1) {
      servo.write(servoOffPosition);
      Serial.println("Servo: ON (Irrigation Needed)");
    } else {
      servo.write(servoOnPosition);
      Serial.println("Servo: OFF (No Irrigation Needed)");
    }
  }
}

// Function to connect to Wi-Fi
void setup_wifi() {
  delay(10);
  Serial.print("Connecting to WiFi: ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\nWiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

// Function to ensure MQTT connection
void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    String clientId = "ESP32Client-";
    clientId += String(random(0xffff), HEX);
    if (client.connect(clientId.c_str())) {
      Serial.println("Connected to MQTT broker");

      // Subscribe to the prediction topic
      client.subscribe("irrigation/decision");
      Serial.println("Subscribed to topic: irrigation/decision");
    } else {
      Serial.print("Failed, rc=");
      Serial.print(client.state());
      Serial.println(" Trying again in 5 seconds...");
      delay(5000);
    }
  }
}

// Function to read soil moisture
int readSoilMoisture() {
  int soilValue = analogRead(soilMoisturePin); // Simulated analog read
  int moisturePercent = map(soilValue, 4095, 0, 0, 100);
  return moisturePercent;
}

// Function to send sensor data to MQTT
void sendSensorData() {
  TempAndHumidity data = dhtSensor.getTempAndHumidity();

  if (isnan(data.temperature) || isnan(data.humidity)) {
    Serial.println("Failed to read from DHT sensor!");
    lcd.clear();
    lcd.print("Sensor Error!");
    return;
  }

  // Read soil moisture
  int soilMoisture = readSoilMoisture();

  // Publish data to MQTT
  String temp = String(data.temperature, 2);
  String hum = String(data.humidity, 2);
  String moisture = String(soilMoisture);

  client.publish("TEMP", temp.c_str());
  client.publish("HUMIDITY", hum.c_str());
  client.publish("SOIL_MOISTURE", moisture.c_str());

  // Display data on LCD
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Temp: ");
  lcd.print(data.temperature);
  lcd.print("C");
  lcd.setCursor(0, 1);
  lcd.print("Hum: ");
  lcd.print(data.humidity);
  lcd.print("%");
  delay(3000);

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Soil: ");
  lcd.print(soilMoisture);
  lcd.print("%");
  delay(3000);

  // Debug output
  Serial.print("Temperature: ");
  Serial.println(temp);
  Serial.print("Humidity: ");
  Serial.println(hum);
  Serial.print("Soil Moisture: ");
  Serial.println(moisture);
}

void setup() {
  // Initialize Serial Monitor
  Serial.begin(9600);

  // Initialize peripherals
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
  dhtSensor.setup(DHT_PIN, DHTesp::DHT22);
  servo.attach(servoPin);
  servo.write(servoOffPosition);

  // Initialize LCD
  Wire.begin(23, 22); // Specify SDA and SCL pins
  lcd.init();
  lcd.backlight();

  Serial.println("Setup complete!");
}

void loop() {
  // Ensure MQTT connection
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // Publish sensor data periodically
  unsigned long now = millis();
  if (now - lastMsg > 2000) {
    lastMsg = now;
    sendSensorData();
  }
}
